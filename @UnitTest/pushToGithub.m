% Method to push ALL published HTML directories to github
function pushToGithub(obj, vScriptsList)
  

    fprintf('\n------------------------------------------------------------------------------------------------------------');
    fprintf('\nPushing to hithub (%s)',  UnitTest.getPref('githubRepoURL'));
    fprintf('\n------------------------------------------------------------------------------------------------------------\n\n');

    
    % root directory location
    validationRootDirectory = UnitTest.getPref('validationRootDir');
    
    % For this to work, we must clone a second version of the project (e.g. isetbio)
    % and check-out the gh-pages branch. 
    % Local directory where ISETBIO - gh-pages branch is cloned to
    gh_pages_CloneDir = UnitTest.getPref('clonedGhPagesLocation');
    
    % Local directory where the project wiki is cloned to. 
    % This is where we store the ValidationResults.md file
    % with contains a the catalog of the validation runs and pointers to
    % the html files containing the code and results
    wikiCloneDir = UnitTest.getPref('clonedWikiLocation');
    
    % URL of github repo
    githubRepoURL = UnitTest.getPref('githubRepoURL');
    
    % Directory where all published HTML directories will be moved to
    validationDocsDir  = sprintf('%s/validationdocs', gh_pages_CloneDir);
    
    % URL where validation docs will live
    validationDocsURL = sprintf('%s/validationdocs', githubRepoURL);
    
    % Name of the markup file containing the catalog of validation runs and
    % pointers to the corresponding html files.
    validationResultsCatalogFile = 'ValidationResults.md';
    
    % URL on remote where the validationResultsCatalogFile lives
    % validationResultsCatalogFileURL = 'https://github.com/npcottaris/ISETBIO_ValidationDocs/wiki/ValidationResults';
    validationResultsCatalogFileURL = sprintf('%s/ValidationResults', wikiCloneDir);
    
    % cd to validationDocsDir and update it
    cd(validationDocsDir);
    
    % set to true when having trouble synchronizing with github  
    removeAllTargetHTMLDirs = false;
    
    % Do a git pull (so we can push later with no conflicts)
    obj.issueGitCommand('git pull');
    
    if (removeAllTargetHTMLDirs)
        % rm all current HTML directories
        system('rm -r -f *');
    end
    
    
    % cd to wikiCloneDir and update it
    cd(wikiCloneDir);
    obj.issueGitCommand('git pull');
    
    catalogFileName = fullfile(wikiCloneDir, validationResultsCatalogFile);
    
    if (numel(vScriptsList) > 1)
        % Now we start modifying things
        % Remove previous validationResultsCatalogFile
        system(['rm -rf ' catalogFileName]);
    
        % Open new validationResultsCatalogFile
        validationResultsCatalogFID = fopen(catalogFileName,'w');
        fprintf(validationResultsCatalogFID,'***\n_This file is autogenerated during validation. Do not edit manually, as all changes will be overwritten during the next validation run. **Last run on %s by %s (host name: %s)**._\n***', datestr(now), obj.hostInfo.userName, obj.hostInfo.computerAddress);
    else
        % Open the file in read/write mode, so we can update the date for
        % the single script.
        validationResultsCatalogFID = fopen(catalogFileName,'r+');
    end
    
    
    
    sectionNames = keys(obj.sectionData);
    for sectionIndex = 1:numel(sectionNames)
        
        isSingleFileWithNewSection = false;
        % write sectionName
        sectionName = sectionNames{sectionIndex};
        if (numel(vScriptsList) > 1)
            fprintf(validationResultsCatalogFID,'\n####  %s \n', sectionName);
        else
           % search the file for the pattern
           patternToLookUp = sprintf('####  %s', sectionName);
           fseek(validationResultsCatalogFID, 0, 'bof');
           position = [];
           while ~feof(validationResultsCatalogFID) 
                tline = fgetl(validationResultsCatalogFID); 
                if strfind(tline, patternToLookUp) > 0 
                    fprintf('Found pattern ''%s''', patternToLookUp);
                    position = ftell(validationResultsCatalogFID);
                end
           end
           if (~isempty(position))
               % Go right before the sectionName
               fseek(validationResultsCatalogFID, position, 'bof');
           else
               % Go to the end of the file
               fseek(validationResultsCatalogFID, 0, 'eof');
               % and write new section name
               fprintf(validationResultsCatalogFID,'\n####  %s \n', sectionName);
               isSingleFileWithNewSection = true;
           end
        end
        
        % Write section info text
        functionNames = obj.sectionData(sectionName);
        if (isempty(functionNames))
            if (numel(vScriptsList) > 1) || (isSingleFileWithNewSection)
                fprintf(validationResultsCatalogFID,'_This section contains no scripts with successful validation outcomes._ \n');
            end
            continue;
        end
        
        [validationScriptDirectory, ~, ~] = fileparts(which(sprintf('%s', char(functionNames{1}))));
        
        cd(validationScriptDirectory);
        if (numel(vScriptsList) > 1) || (isSingleFileWithNewSection)
            fprintf(validationResultsCatalogFID,'_%s_ \n', sprintf('%s', fileread('info.txt')));
        end
        
        for functionIndex = 1:numel(functionNames)
            validationScriptName = sprintf('%s', char(functionNames{functionIndex}));
            
            % Determine script small name and sub-directory
            indices = strfind(validationScriptName, filesep);
            smallScriptName = validationScriptName(indices(end)+1:end-2);

            [validationScriptDirectory, ~, ~] = fileparts(which(validationScriptName));
            seps = strfind(validationScriptDirectory, '/');
            validationScriptSubDir = validationScriptDirectory(seps(end)+1:end);
            
            % make subdir in local validationDocsDir 
            sectionWebDir = fullfile(validationDocsDir , validationScriptSubDir);
            if (~exist(sectionWebDir,'dir'))
                mkdir(sectionWebDir);
            end
            
            % cd to validationRootDirectory/sectionSubDir
            cd(sprintf('%s', validationScriptDirectory));
        
            % synthesize the source HTML directory name
            sourceHTMLdir = sprintf('%s%s/%s_HTML', obj.htmlDir, validationScriptSubDir, smallScriptName);
            
            % synthesize the target HTML directory name
            targetHTMLdir = fullfile(validationDocsDir , validationScriptSubDir, smallScriptName);
            
            if (removeAllTargetHTMLDirs)
                % remove any existing target HTML directory
                system(sprintf('rm -rf %s', targetHTMLdir));
            end
            
            if (exist(sourceHTMLdir, 'dir') == 0)
                fprintf(2,'\n>>>> Directory %s not found.\n>>>> Rerun validateAll(), or make sure there is no typo.\n', sourceHTMLdir);
                return;
            end
            
            if (exist(targetHTMLdir, 'dir') == 0)
                fprintf('Generating target HTML dir (''%s'')\n', targetHTMLdir);
                system(sprintf('mkdir %s', targetHTMLdir));
            end
            
            % mv source to target directory
            system(sprintf('mv %s/* %s/',  sourceHTMLdir, targetHTMLdir));

            % get summary text from validation script.
            summaryText = getSummaryText(validationScriptName);
        
            if (numel(vScriptsList) > 1) || (isSingleFileWithNewSection)
               % Add entry to validationResultsCatalogFile
               fprintf(validationResultsCatalogFID, '* [ %s ]( %s/%s/%s/%s.html) - %s \n',  smallScriptName, validationDocsURL, validationScriptSubDir, smallScriptName, smallScriptName,summaryText);  
            else
                patternToLookUp = sprintf('* [ %s ]', smallScriptName);
                fseek(validationResultsCatalogFID, 0, 'bof');
                fileContents = fscanf(validationResultsCatalogFID, '%c', Inf);
                position = strfind(fileContents, patternToLookUp)-1;
                
                if (~isempty(position))
                    insertedFileContents = sprintf('\n***Note: Script ''%s'' was updated separately on %s by %s (host name: %s).***\n', smallScriptName, datestr(now), obj.hostInfo.userName, obj.hostInfo.computerAddress);
                    newFileContents(1:position) = fileContents(1:position);
                    remainingFileContents = fileContents(position+1:end);
                    newFileContents(position+1:position+numel(insertedFileContents)) = insertedFileContents;
                    p = numel(newFileContents);
                    newFileContents(p+1:p+numel(remainingFileContents)) = remainingFileContents;
                    fclose(validationResultsCatalogFID);
                    
                    system(['rm -rf ' catalogFileName]);
    
                    % Open new validationResultsCatalogFile
                    validationResultsCatalogFID = fopen(catalogFileName,'w');
                    fprintf(validationResultsCatalogFID, '%c', newFileContents);
                else
                    % Go to the end of the file
                    fseek(validationResultsCatalogFID, 0, 'eof');
                    % And add entry to validationResultsCatalogFile
                    fprintf(validationResultsCatalogFID, '* [ %s ]( %s/%s/%s/%s.html) - %s \n',  smallScriptName, validationDocsURL, validationScriptSubDir, smallScriptName, smallScriptName,summaryText);  
                end
               
            end
        end % for functionIndex
    end % for sectionIndex
    
    % Close the validationResultsCatalogFile
    fclose(validationResultsCatalogFID);
    
    % Now push stuff to git
    % ----------------- IMPORTANT NOTE REGARDING PUSHING TO GIT  FROM MATLAB -----------------
    % Note: to make push work from withing MATLAB, I had to change the
    % libcurl library found in /Applications/MATLAB_R2014a.app/bin/maci64
    % This is because MATLAB's libcurl does not have support for https
    % as evidenced by system('curl -V') which gives:
    % curl 7.30.0 (x86_64-apple-darwin13.0) libcurl/7.21.6
    % Protocols: dict file ftp gopher http imap pop3 smtp telnet tftp 
    % Features: IPv6 Largefile 
    %
    % In contrast curl -V in a terminal window gives:
    % curl 7.30.0 (x86_64-apple-darwin13.0) libcurl/7.30.0 SecureTransport zlib/1.2.5
    % Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smtp smtps telnet tftp 
    % Features: AsynchDNS GSS-Negotiate IPv6 Largefile NTLM NTLM_WB SSL libz 
    %
    % To fix this, open a terminal and go to the following directory:
    %   cd /Applications/MATLAB_R2014a.app/bin/maci64
    %   ls -al libcur*
    % This gives me:
    %   libcurl.4.dylib
    %   libcurl.dylib -> libcurl.4.dylib
    % Remove the pointer to the existing library:
    %   rm libcurl.dylib
    % Also backup the existing library in case something goes wrong.
    %   mv libcurl.4.dylib existing_libcurl.4.dylib
    % Then make soft links to the system's libcurl as follows:
    %   ln -s /usr/lib/libcurl.4.dylib libcurl.4.dylib
    %   ln -s /usr/lib/libcurl.4.dylib libcurl.dylib
    % After this, system('curl -V') shows support for https and 
    % system('git push') works fine (at least on Mavericks 10.9.4).
    % ----------------- IMPORTANT NOTE REGARDING PUSHING TO GIT  FROM MATLAB -----------------
    
    % First push the HTML validation datafiles
    if (obj.validationParams.verbosity > 2)
        fprintf('\n\nPushing validation reports (HTML) to github ...\n');
    end
    
    cd(validationDocsDir);
    
    obj.issueGitCommand('git config --global push.default matching');
    %obj.issueGitCommand('git config --global push.default simple');

    % Stage everything
    obj.issueGitCommand('git add -A');
    
    
    % Commit everything
    obj.issueGitCommand('git commit -a -m "Validation results docs update";');
    % Push to remote
    obj.issueGitCommand('git push  origin gh-pages');
   
    
    % Next update the wiki catalog of validation runs
    if (obj.validationParams.verbosity > 2)
        fprintf('\n\nPushing catalog of validation reports to github ...\n');
    end 
    cd(wikiCloneDir);
    
    obj.issueGitCommand('git config --global push.default matching');
    % obj.issueGitCommand('git config --global push.default simple');
    
    % Stage everything
    obj.issueGitCommand('git add -A');
    

    % Commit everything
    obj.issueGitCommand('git commit  -a -m "Validation results catalog update";');
    % Push to remote
    obj.issueGitCommand('git push');
    
    % All done. Return to root directory
    cd(validationRootDirectory);
end

function summaryText = getSummaryText(validationScriptName)
    % Open file
    fid = fopen(which(validationScriptName),'r');

    % Throw away first two lines
    lineString = fgetl(fid);
    lineString = fgetl(fid);

    % Get line with function description (3rd lone)
    lineString = fgetl(fid);
    % Remove any comment characters (%)
    summaryText  = regexprep(lineString ,'[%]','');
    
    fclose(fid);
end
